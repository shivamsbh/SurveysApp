datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  Survey      Survey[]
  Answer      Answer[]
  UserReponse UserReponse[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Survey {
  id          String  @id @default(cuid())
  title       String
  description String?

  // User who got edit rights, and right to see the responses
  owner       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  SurveyGroup SurveyGroup[]

  createdAt   DateTime      @default(now())
  UserReponse UserReponse[]
}

// A table to group a bunch of questions together
model SurveyGroup {
  id          String  @id @default(cuid())
  title       String
  description String?

  survey Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  order Int @default(autoincrement())

  Question Question[]
  surveyId String
}

model Question {
  id          String  @id @default(cuid())
  title       String
  description String?

  // type = text, number, date, select
  type     String
  required Boolean

  group SurveyGroup @relation(fields: [surveyGroupId], references: [id], onDelete: Cascade)

  order Int @default(autoincrement())

  QuestionOptions QuestionOptions[]
  surveyGroupId   String
  Answer          Answer[]
}

model QuestionOptions {
  id         String   @id @default(cuid())
  display    String
  value      String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  order Int @default(autoincrement())
}

model Answer {
  id String @id @default(cuid())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  value String

  userId     String
  questionId String

  // A user can answer a particular question only once
  @@unique([userId, questionId])
}

model UserReponse {
  id String @id @default(cuid())

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  userId   String
  surveyId String

  @@unique([userId, surveyId])
}
